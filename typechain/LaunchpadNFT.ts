/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace LaunchpadNFT {
  export type HistoryStruct = {
    nftId: BigNumberish;
    refCode: string;
    level: BigNumberish;
    user: string;
    ownBy: BigNumberish;
    robiBoost: BigNumberish;
    createTimestamp: BigNumberish;
    launchIndex: BigNumberish;
    isUsed: boolean;
    isDeleted: boolean;
    priceInUSD: BigNumberish;
  };

  export type HistoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    nftId: BigNumber;
    refCode: string;
    level: BigNumber;
    user: string;
    ownBy: number;
    robiBoost: BigNumber;
    createTimestamp: BigNumber;
    launchIndex: BigNumber;
    isUsed: boolean;
    isDeleted: boolean;
    priceInUSD: BigNumber;
  };
}

export interface LaunchpadNFTInterface extends utils.Interface {
  contractName: "LaunchpadNFT";
  functions: {
    "ADMIN_ACTION_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "USER_ACTION_ROLE()": FunctionFragment;
    "addNewLaunch(uint32,uint256,uint32,uint256,address,uint32)": FunctionFragment;
    "boughtCount(address)": FunctionFragment;
    "buyMultipleNFT(uint256,uint32,string)": FunctionFragment;
    "forceUnfreezeNFT(uint256)": FunctionFragment;
    "freezingTimeAtSecond()": FunctionFragment;
    "getHistoryWithNFTId(uint256)": FunctionFragment;
    "getNftFrozenTimeLeft(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "histories(uint256)": FunctionFragment;
    "historyLength()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "launches(uint256)": FunctionFragment;
    "leftToSell(uint256)": FunctionFragment;
    "maxToUser()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "profitAddress()": FunctionFragment;
    "profitFees()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sentMultipleNFT(uint256,address,uint32,string,bool)": FunctionFragment;
    "setFreezingTime(uint256)": FunctionFragment;
    "setMaxToUser(uint32)": FunctionFragment;
    "setProfitAddress(address)": FunctionFragment;
    "setProfitFees(uint32)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setUSDT(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "unFreezeNFT(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateHistory(uint256[],bool,bool)": FunctionFragment;
    "updateLaunch(uint32,uint32,uint256,uint32,uint256,address,uint32)": FunctionFragment;
    "usdt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ACTION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_ACTION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNewLaunch",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "boughtCount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyMultipleNFT",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceUnfreezeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezingTimeAtSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoryWithNFTId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftFrozenTimeLeft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "histories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historyLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "launches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leftToSell",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxToUser", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profitAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sentMultipleNFT",
    values: [BigNumberish, string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreezingTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxToUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setUSDT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unFreezeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateHistory",
    values: [BigNumberish[], boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLaunch",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ADMIN_ACTION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_ACTION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boughtCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMultipleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceUnfreezeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezingTimeAtSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoryWithNFTId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftFrozenTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "histories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "historyLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leftToSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxToUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profitFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sentMultipleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreezingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUSDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unFreezeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;

  events: {
    "Buy(uint256,string,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Receive(uint256,string,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type BuyEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  {
    nftId: BigNumber;
    refCode: string;
    user: string;
    launchIndex: BigNumber;
    robiboost: BigNumber;
  }
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type ReceiveEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  {
    nftId: BigNumber;
    refCode: string;
    user: string;
    launchIndex: BigNumber;
    robiboost: BigNumber;
  }
>;

export type ReceiveEventFilter = TypedEventFilter<ReceiveEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface LaunchpadNFT extends BaseContract {
  contractName: "LaunchpadNFT";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaunchpadNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ACTION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    USER_ACTION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addNewLaunch(
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boughtCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyMultipleNFT(
      _launchIndex: BigNumberish,
      amount: BigNumberish,
      _refCode: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceUnfreezeNFT(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezingTimeAtSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHistoryWithNFTId(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [LaunchpadNFT.HistoryStructOutput] & {
        history: LaunchpadNFT.HistoryStructOutput;
      }
    >;

    getNftFrozenTimeLeft(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    histories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftId: BigNumber;
        refCode: string;
        level: BigNumber;
        user: string;
        ownBy: number;
        robiBoost: BigNumber;
        createTimestamp: BigNumber;
        launchIndex: BigNumber;
        isUsed: boolean;
        isDeleted: boolean;
        priceInUSD: BigNumber;
      }
    >;

    historyLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _wineryNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    launches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number, number, string, number] & {
        priceInUSD: BigNumber;
        robiBoost: BigNumber;
        totalCount: number;
        soldCount: number;
        sendCount: number;
        level: number;
        loyaltyAddress: string;
        loyaltyFees: number;
      }
    >;

    leftToSell(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxToUser(overrides?: CallOverrides): Promise<[number]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    profitAddress(overrides?: CallOverrides): Promise<[string]>;

    profitFees(overrides?: CallOverrides): Promise<[number]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sentMultipleNFT(
      _launchIndex: BigNumberish,
      _receiver: string,
      amount: BigNumberish,
      _refCode: string,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFreezingTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxToUser(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfitAddress(
      _profitAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfitFees(
      _newProfitFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSDT(
      _usdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    unFreezeNFT(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateHistory(
      _ids: BigNumberish[],
      _isUsed: boolean,
      _isDeleted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLaunch(
      _index: BigNumberish,
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ACTION_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  USER_ACTION_ROLE(overrides?: CallOverrides): Promise<string>;

  addNewLaunch(
    _totalCount: BigNumberish,
    _priceInUSD: BigNumberish,
    _level: BigNumberish,
    _robiBoost: BigNumberish,
    _loyaltyAddress: string,
    _loyaltyFees: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boughtCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyMultipleNFT(
    _launchIndex: BigNumberish,
    amount: BigNumberish,
    _refCode: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceUnfreezeNFT(
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezingTimeAtSecond(overrides?: CallOverrides): Promise<BigNumber>;

  getHistoryWithNFTId(
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LaunchpadNFT.HistoryStructOutput>;

  getNftFrozenTimeLeft(
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  histories(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftId: BigNumber;
      refCode: string;
      level: BigNumber;
      user: string;
      ownBy: number;
      robiBoost: BigNumber;
      createTimestamp: BigNumber;
      launchIndex: BigNumber;
      isUsed: boolean;
      isDeleted: boolean;
      priceInUSD: BigNumber;
    }
  >;

  historyLength(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _wineryNFT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  launches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, number, number, string, number] & {
      priceInUSD: BigNumber;
      robiBoost: BigNumber;
      totalCount: number;
      soldCount: number;
      sendCount: number;
      level: number;
      loyaltyAddress: string;
      loyaltyFees: number;
    }
  >;

  leftToSell(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxToUser(overrides?: CallOverrides): Promise<number>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  profitAddress(overrides?: CallOverrides): Promise<string>;

  profitFees(overrides?: CallOverrides): Promise<number>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sentMultipleNFT(
    _launchIndex: BigNumberish,
    _receiver: string,
    amount: BigNumberish,
    _refCode: string,
    freeze: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFreezingTime(
    _time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxToUser(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfitAddress(
    _profitAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfitFees(
    _newProfitFees: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSDT(
    _usdt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  unFreezeNFT(
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateHistory(
    _ids: BigNumberish[],
    _isUsed: boolean,
    _isDeleted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLaunch(
    _index: BigNumberish,
    _totalCount: BigNumberish,
    _priceInUSD: BigNumberish,
    _level: BigNumberish,
    _robiBoost: BigNumberish,
    _loyaltyAddress: string,
    _loyaltyFees: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ACTION_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    USER_ACTION_ROLE(overrides?: CallOverrides): Promise<string>;

    addNewLaunch(
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    boughtCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyMultipleNFT(
      _launchIndex: BigNumberish,
      amount: BigNumberish,
      _refCode: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    forceUnfreezeNFT(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freezingTimeAtSecond(overrides?: CallOverrides): Promise<BigNumber>;

    getHistoryWithNFTId(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LaunchpadNFT.HistoryStructOutput>;

    getNftFrozenTimeLeft(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    histories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftId: BigNumber;
        refCode: string;
        level: BigNumber;
        user: string;
        ownBy: number;
        robiBoost: BigNumber;
        createTimestamp: BigNumber;
        launchIndex: BigNumber;
        isUsed: boolean;
        isDeleted: boolean;
        priceInUSD: BigNumber;
      }
    >;

    historyLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_wineryNFT: string, overrides?: CallOverrides): Promise<void>;

    launches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number, number, string, number] & {
        priceInUSD: BigNumber;
        robiBoost: BigNumber;
        totalCount: number;
        soldCount: number;
        sendCount: number;
        level: number;
        loyaltyAddress: string;
        loyaltyFees: number;
      }
    >;

    leftToSell(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxToUser(overrides?: CallOverrides): Promise<number>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    profitAddress(overrides?: CallOverrides): Promise<string>;

    profitFees(overrides?: CallOverrides): Promise<number>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sentMultipleNFT(
      _launchIndex: BigNumberish,
      _receiver: string,
      amount: BigNumberish,
      _refCode: string,
      freeze: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setFreezingTime(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxToUser(_max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProfitAddress(
      _profitAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitFees(
      _newProfitFees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDT(_usdt: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    unFreezeNFT(nftId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateHistory(
      _ids: BigNumberish[],
      _isUsed: boolean,
      _isDeleted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLaunch(
      _index: BigNumberish,
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Buy(uint256,string,address,uint256,uint256)"(
      nftId?: null,
      refCode?: null,
      user?: string | null,
      launchIndex?: null,
      robiboost?: null
    ): BuyEventFilter;
    Buy(
      nftId?: null,
      refCode?: null,
      user?: string | null,
      launchIndex?: null,
      robiboost?: null
    ): BuyEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Receive(uint256,string,address,uint256,uint256)"(
      nftId?: null,
      refCode?: null,
      user?: string | null,
      launchIndex?: null,
      robiboost?: null
    ): ReceiveEventFilter;
    Receive(
      nftId?: null,
      refCode?: null,
      user?: string | null,
      launchIndex?: null,
      robiboost?: null
    ): ReceiveEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADMIN_ACTION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    USER_ACTION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addNewLaunch(
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boughtCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyMultipleNFT(
      _launchIndex: BigNumberish,
      amount: BigNumberish,
      _refCode: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceUnfreezeNFT(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezingTimeAtSecond(overrides?: CallOverrides): Promise<BigNumber>;

    getHistoryWithNFTId(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftFrozenTimeLeft(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    histories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wineryNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    launches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    leftToSell(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxToUser(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    profitAddress(overrides?: CallOverrides): Promise<BigNumber>;

    profitFees(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sentMultipleNFT(
      _launchIndex: BigNumberish,
      _receiver: string,
      amount: BigNumberish,
      _refCode: string,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFreezingTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxToUser(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfitAddress(
      _profitAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfitFees(
      _newProfitFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSDT(
      _usdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    unFreezeNFT(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateHistory(
      _ids: BigNumberish[],
      _isUsed: boolean,
      _isDeleted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLaunch(
      _index: BigNumberish,
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ACTION_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USER_ACTION_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNewLaunch(
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boughtCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyMultipleNFT(
      _launchIndex: BigNumberish,
      amount: BigNumberish,
      _refCode: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceUnfreezeNFT(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezingTimeAtSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHistoryWithNFTId(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftFrozenTimeLeft(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    histories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _wineryNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    launches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leftToSell(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxToUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sentMultipleNFT(
      _launchIndex: BigNumberish,
      _receiver: string,
      amount: BigNumberish,
      _refCode: string,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFreezingTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxToUser(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfitAddress(
      _profitAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfitFees(
      _newProfitFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSDT(
      _usdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unFreezeNFT(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateHistory(
      _ids: BigNumberish[],
      _isUsed: boolean,
      _isDeleted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLaunch(
      _index: BigNumberish,
      _totalCount: BigNumberish,
      _priceInUSD: BigNumberish,
      _level: BigNumberish,
      _robiBoost: BigNumberish,
      _loyaltyAddress: string,
      _loyaltyFees: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
