/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NFTDaoInterface extends utils.Interface {
  contractName: "NFTDao";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "IS_REQUIRED_BOOST_TO_UPGARDE()": FunctionFragment;
    "LAUNCHPAD_TOKEN_MINTER()": FunctionFragment;
    "MAX_ARRAY_LENGTH_PER_REQUEST()": FunctionFragment;
    "RB_SETTER_ROLE()": FunctionFragment;
    "TOKEN_FREEZER()": FunctionFragment;
    "TOKEN_MINTER_ROLE()": FunctionFragment;
    "accrueRB(address,uint256)": FunctionFragment;
    "addBlackListNFT(address[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decreaseRB(uint256[],uint256,uint256,address)": FunctionFragment;
    "decreaseRBView(uint256[],uint256,uint256)": FunctionFragment;
    "delBlackListNFT(address[])": FunctionFragment;
    "exchangeRB(uint256,address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getInfoForStaking(uint256)": FunctionFragment;
    "getLevel(uint256)": FunctionFragment;
    "getRB(uint256)": FunctionFragment;
    "getRbBalance(address)": FunctionFragment;
    "getRbBalanceByDays(address,uint256)": FunctionFragment;
    "getRbTotalAmount(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseRBToken(uint256[],uint256[])": FunctionFragment;
    "initialize(string,uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "launchpadMint(address,uint256,uint256,bool)": FunctionFragment;
    "levelUp(uint256[])": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "remainRBToNextLevel(uint256[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sendRBToMaxInTokenLevel(uint256[])": FunctionFragment;
    "sendRBToToken(uint256[],uint256[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setBurnRBPeriod(uint256)": FunctionFragment;
    "setLevelTable(uint256[7])": FunctionFragment;
    "setLevelUpPercent(uint8)": FunctionFragment;
    "setRBTable(uint256[7])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenFreeze(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokenUnfreeze(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userBlacklist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_REQUIRED_BOOST_TO_UPGARDE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAUNCHPAD_TOKEN_MINTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ARRAY_LENGTH_PER_REQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RB_SETTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_FREEZER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueRB",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlackListNFT",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "decreaseRB",
    values: [BigNumberish[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRBView",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delBlackListNFT",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRB",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInfoForStaking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRB", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getRbBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRbBalanceByDays",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRbTotalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRBToken",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "launchpadMint",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUp",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainRBToNextLevel",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRBToMaxInTokenLevel",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRBToToken",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBurnRBPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelTable",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelUpPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRBTable",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFreeze",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenUnfreeze",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBlacklist",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_REQUIRED_BOOST_TO_UPGARDE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAUNCHPAD_TOKEN_MINTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ARRAY_LENGTH_PER_REQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RB_SETTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_FREEZER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrueRB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBlackListNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decreaseRB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRBView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delBlackListNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchangeRB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInfoForStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRbBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRbBalanceByDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRbTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseRBToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchpadMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainRBToNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRBToMaxInTokenLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRBToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnRBPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevelTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevelUpPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRBTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenUnfreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBlacklist",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "GainRB(uint256,uint256)": EventFragment;
    "Initialize(string,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LevelUp(address,uint256,uint256[])": EventFragment;
    "RBAccrued(address,uint256)": EventFragment;
    "RbDecrease(uint256[],uint256[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenMint(address,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GainRB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RBAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RbDecrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type GainRBEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; newRB: BigNumber }
>;

export type GainRBEventFilter = TypedEventFilter<GainRBEvent>;

export type InitializeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { baseURI: string; initialRobiBoost: BigNumber; burnRBPeriod: BigNumber }
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type LevelUpEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  { user: string; newLevel: BigNumber; parentsTokensId: BigNumber[] }
>;

export type LevelUpEventFilter = TypedEventFilter<LevelUpEvent>;

export type RBAccruedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type RBAccruedEventFilter = TypedEventFilter<RBAccruedEvent>;

export type RbDecreaseEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  { tokensId: BigNumber[]; finalRB: BigNumber[] }
>;

export type RbDecreaseEventFilter = TypedEventFilter<RbDecreaseEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TokenMintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { to: string; tokenId: BigNumber; level: BigNumber; robiBoost: BigNumber }
>;

export type TokenMintEventFilter = TypedEventFilter<TokenMintEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface NFTDao extends BaseContract {
  contractName: "NFTDao";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTDaoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    IS_REQUIRED_BOOST_TO_UPGARDE(overrides?: CallOverrides): Promise<[boolean]>;

    LAUNCHPAD_TOKEN_MINTER(overrides?: CallOverrides): Promise<[string]>;

    MAX_ARRAY_LENGTH_PER_REQUEST(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    RB_SETTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_FREEZER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    accrueRB(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBlackListNFT(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decreaseRB(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseRBView(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { decreaseAmount: BigNumber }>;

    delBlackListNFT(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRB(
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInfoForStaking(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        tokenOwner: string;
        stakeFreeze: boolean;
        robiBoost: BigNumber;
      }
    >;

    getLevel(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRB(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRbBalance(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRbBalanceByDays(
      user: string,
      dayCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRbTotalAmount(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean, BigNumber, string] & {
        tokenId: BigNumber;
        tokenOwner: string;
        level: BigNumber;
        rb: BigNumber;
        stakeFreeze: boolean;
        remainToNextLevel: BigNumber;
        uri: string;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseRBToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      baseURI: string,
      initialRobiBoost: BigNumberish,
      burnRBPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    launchpadMint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    levelUp(
      tokenId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    remainRBToNextLevel(
      tokenId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendRBToMaxInTokenLevel(
      tokenId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendRBToToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      newBaseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnRBPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLevelTable(
      levelTable: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLevelUpPercent(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRBTable(
      rbTable: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenFreeze(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenUnfreeze(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBlacklist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  IS_REQUIRED_BOOST_TO_UPGARDE(overrides?: CallOverrides): Promise<boolean>;

  LAUNCHPAD_TOKEN_MINTER(overrides?: CallOverrides): Promise<string>;

  MAX_ARRAY_LENGTH_PER_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

  RB_SETTER_ROLE(overrides?: CallOverrides): Promise<string>;

  TOKEN_FREEZER(overrides?: CallOverrides): Promise<string>;

  TOKEN_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  accrueRB(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBlackListNFT(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  decreaseRB(
    tokensId: BigNumberish[],
    decreasePercent: BigNumberish,
    minDecreaseLevel: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseRBView(
    tokensId: BigNumberish[],
    decreasePercent: BigNumberish,
    minDecreaseLevel: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delBlackListNFT(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRB(
    amount: BigNumberish,
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getInfoForStaking(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      tokenOwner: string;
      stakeFreeze: boolean;
      robiBoost: BigNumber;
    }
  >;

  getLevel(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRB(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getRbBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRbBalanceByDays(
    user: string,
    dayCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRbTotalAmount(
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getToken(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, boolean, BigNumber, string] & {
      tokenId: BigNumber;
      tokenOwner: string;
      level: BigNumber;
      rb: BigNumber;
      stakeFreeze: boolean;
      remainToNextLevel: BigNumber;
      uri: string;
    }
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseRBToken(
    tokenId: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    baseURI: string,
    initialRobiBoost: BigNumberish,
    burnRBPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  launchpadMint(
    to: string,
    level: BigNumberish,
    robiBoost: BigNumberish,
    freeze: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  levelUp(
    tokenId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    to: string,
    level: BigNumberish,
    robiBoost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  remainRBToNextLevel(
    tokenId: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendRBToMaxInTokenLevel(
    tokenId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendRBToToken(
    tokenId: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    newBaseUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnRBPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLevelTable(
    levelTable: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLevelUpPercent(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRBTable(
    rbTable: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenFreeze(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenUnfreeze(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBlacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    IS_REQUIRED_BOOST_TO_UPGARDE(overrides?: CallOverrides): Promise<boolean>;

    LAUNCHPAD_TOKEN_MINTER(overrides?: CallOverrides): Promise<string>;

    MAX_ARRAY_LENGTH_PER_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    RB_SETTER_ROLE(overrides?: CallOverrides): Promise<string>;

    TOKEN_FREEZER(overrides?: CallOverrides): Promise<string>;

    TOKEN_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    accrueRB(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addBlackListNFT(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    decreaseRB(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseRBView(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delBlackListNFT(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRB(
      amount: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getInfoForStaking(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        tokenOwner: string;
        stakeFreeze: boolean;
        robiBoost: BigNumber;
      }
    >;

    getLevel(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRB(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRbBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRbBalanceByDays(
      user: string,
      dayCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRbTotalAmount(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean, BigNumber, string] & {
        tokenId: BigNumber;
        tokenOwner: string;
        level: BigNumber;
        rb: BigNumber;
        stakeFreeze: boolean;
        remainToNextLevel: BigNumber;
        uri: string;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseRBToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      baseURI: string,
      initialRobiBoost: BigNumberish,
      burnRBPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    launchpadMint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      freeze: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelUp(tokenId: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    mint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    remainRBToNextLevel(
      tokenId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRBToMaxInTokenLevel(
      tokenId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendRBToToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(newBaseUri: string, overrides?: CallOverrides): Promise<void>;

    setBurnRBPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLevelTable(
      levelTable: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLevelUpPercent(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRBTable(
      rbTable: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFreeze(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenUnfreeze(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userBlacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "GainRB(uint256,uint256)"(
      tokenId?: BigNumberish | null,
      newRB?: null
    ): GainRBEventFilter;
    GainRB(tokenId?: BigNumberish | null, newRB?: null): GainRBEventFilter;

    "Initialize(string,uint256,uint256)"(
      baseURI?: null,
      initialRobiBoost?: null,
      burnRBPeriod?: null
    ): InitializeEventFilter;
    Initialize(
      baseURI?: null,
      initialRobiBoost?: null,
      burnRBPeriod?: null
    ): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LevelUp(address,uint256,uint256[])"(
      user?: string | null,
      newLevel?: BigNumberish | null,
      parentsTokensId?: null
    ): LevelUpEventFilter;
    LevelUp(
      user?: string | null,
      newLevel?: BigNumberish | null,
      parentsTokensId?: null
    ): LevelUpEventFilter;

    "RBAccrued(address,uint256)"(
      user?: null,
      amount?: null
    ): RBAccruedEventFilter;
    RBAccrued(user?: null, amount?: null): RBAccruedEventFilter;

    "RbDecrease(uint256[],uint256[])"(
      tokensId?: null,
      finalRB?: null
    ): RbDecreaseEventFilter;
    RbDecrease(tokensId?: null, finalRB?: null): RbDecreaseEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TokenMint(address,uint256,uint256,uint256)"(
      to?: string | null,
      tokenId?: BigNumberish | null,
      level?: null,
      robiBoost?: null
    ): TokenMintEventFilter;
    TokenMint(
      to?: string | null,
      tokenId?: BigNumberish | null,
      level?: null,
      robiBoost?: null
    ): TokenMintEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    IS_REQUIRED_BOOST_TO_UPGARDE(overrides?: CallOverrides): Promise<BigNumber>;

    LAUNCHPAD_TOKEN_MINTER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ARRAY_LENGTH_PER_REQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    RB_SETTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_FREEZER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    accrueRB(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBlackListNFT(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    decreaseRB(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseRBView(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delBlackListNFT(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRB(
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInfoForStaking(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevel(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRB(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRbBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRbBalanceByDays(
      user: string,
      dayCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRbTotalAmount(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseRBToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      baseURI: string,
      initialRobiBoost: BigNumberish,
      burnRBPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchpadMint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    levelUp(
      tokenId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    remainRBToNextLevel(
      tokenId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendRBToMaxInTokenLevel(
      tokenId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendRBToToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      newBaseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnRBPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLevelTable(
      levelTable: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLevelUpPercent(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRBTable(
      rbTable: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFreeze(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenUnfreeze(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBlacklist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IS_REQUIRED_BOOST_TO_UPGARDE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LAUNCHPAD_TOKEN_MINTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ARRAY_LENGTH_PER_REQUEST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RB_SETTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_FREEZER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueRB(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBlackListNFT(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseRB(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseRBView(
      tokensId: BigNumberish[],
      decreasePercent: BigNumberish,
      minDecreaseLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delBlackListNFT(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRB(
      amount: BigNumberish,
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInfoForStaking(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevel(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRB(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRbBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRbBalanceByDays(
      user: string,
      dayCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRbTotalAmount(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseRBToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      baseURI: string,
      initialRobiBoost: BigNumberish,
      burnRBPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchpadMint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    levelUp(
      tokenId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      level: BigNumberish,
      robiBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainRBToNextLevel(
      tokenId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendRBToMaxInTokenLevel(
      tokenId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendRBToToken(
      tokenId: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      newBaseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnRBPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLevelTable(
      levelTable: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLevelUpPercent(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRBTable(
      rbTable: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFreeze(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenUnfreeze(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBlacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
